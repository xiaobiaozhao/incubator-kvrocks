# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: CI

on: [push, pull_request]

# Cancel previous workflows if they are the same workflow on same ref (branch/tags)
# with the same event (push/pull_request) even they are in progress.
# This setting will help reduce the number of duplicated workflows.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  license:
    name: Check license header
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: apache/skywalking-eyes@main
        with:
          config: tools/ci/licenserc.yml

  lint:
    name: Lint and check code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code Base
        uses: actions/checkout@v3

      - name: Install Check Tools
        run: |
          sudo pip install --upgrade pip
          sudo pip install --upgrade setuptools
          sudo apt update
          sudo apt install -y cppcheck
          sudo pip install cpplint==1.5.0

      - name: Lint and check code
        run: |
          ./cpplint.sh
          ./cppcheck.sh

  build-and-test:
    name: Build and test
    needs: [license, lint]
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Darwin Clang
            os: macos-latest
          - name: Darwin Clang without Jemalloc
            os: macos-latest
            without_jemalloc: -DDISABLE_JEMALLOC=ON
          - name: Ubuntu GCC
            os: ubuntu-18.04
          - name: Ubuntu Clang
            os: ubuntu-18.04
            clang: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          - name: Ubuntu GCC ASan
            os: ubuntu-18.04
            with_sanitizer: -DENABLE_ASAN=ON
          # - name: Ubuntu GCC TSan
          #   os: ubuntu-18.04
          #   with_sanitizer: -DENABLE_TSAN=ON
          - name: Ubuntu GCC without Jemalloc
            os: ubuntu-18.04
            without_jemalloc: -DDISABLE_JEMALLOC=ON
          - name: Ubuntu Clang ASan
            os: ubuntu-18.04
            with_sanitizer: -DENABLE_ASAN=ON
            clang: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          # - name: Ubuntu Clang TSan
          #   os: ubuntu-18.04
          #   with_sanitizer: -DENABLE_TSAN=ON
          #   clang: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          - name: Ubuntu Clang without Jemalloc
            os: ubuntu-18.04
            without_jemalloc: -DDISABLE_JEMALLOC=ON
            clang: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
          - name: Ubuntu GCC Ninja
            os: ubuntu-18.04
            with_ninja: --ninja
          - name: Ubuntu GCC Ninja without Jemalloc
            os: ubuntu-18.04
            with_ninja: --ninja
            without_jemalloc: -DDISABLE_JEMALLOC=ON
          - name: Ubuntu GCC without luajit
            os: ubuntu-18.04
            without_luajit: -DUSE_LUAJIT=OFF

    runs-on: ${{ matrix.os }}
    steps:
      - name: Cache redis
        id: cache-redis
        uses: actions/cache@v2
        with:
          path: |
            ~/local/bin/redis-cli
          key: ${{ runner.os }}-redis-cli

      - name: Setup macOS
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          brew install cmake gcc autoconf automake libtool
          echo "NPROC=$(sysctl -n hw.ncpu)" >> $GITHUB_ENV

      - name: Setup Linux
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt update
          sudo apt install -y tcl8.5 ninja-build
          echo "NPROC=$(nproc)" >> $GITHUB_ENV

      - name: Install redis
        if: steps.cache-redis.outputs.cache-hit != 'true'
        run: |
          curl -O https://download.redis.io/releases/redis-6.2.6.tar.gz
          tar -xzvf redis-6.2.6.tar.gz
          mkdir -p $HOME/local/bin
          pushd redis-6.2.6 && BUILD_TLS=yes make -j$NPROC redis-cli && mv src/redis-cli $HOME/local/bin/ && popd

      - name: Checkout Code Base
        uses: actions/checkout@v3

      - name: Build Kvrocks
        run: ./build.sh build -j$NPROC --unittest ${{ matrix.clang }} ${{ matrix.with_ninja }} ${{ matrix.with_sanitizer }} ${{ matrix.without_jemalloc }} ${{ matrix.without_luajit }}

      - name: Run Unit Test
        run: ./build/unittest

      - name: Run Redis Tcl Test
        run: |
          cp $HOME/local/bin/redis-cli tests/tcl/redis-cli
          cd tests/tcl
          ./runtest --dont-clean
          SANITIZER_OUTPUT=$(grep "Sanitizer:" tests/tmp -r || true)
          if [[ $SANITIZER_OUTPUT ]]; then
            echo "$SANITIZER_OUTPUT"
            echo "\ndetail reports:\n"
            cat $(find tests/tmp -iname stderr)
            echo "sanitizer error was reported, exiting..."
            exit 1
          fi

  required:
    if: always()
    name: Required
    runs-on: ubuntu-latest
    needs:
      - build-and-test
    steps:
      - name: Merge requirement checking
        run: |
          build_and_test=${{ needs.build-and-test.result }}

          if [[ $build_and_test != 'success' ]]; then
            exit 1
          fi
